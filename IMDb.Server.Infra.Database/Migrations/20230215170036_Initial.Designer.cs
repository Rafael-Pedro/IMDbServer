// <auto-generated />
using System;
using IMDb.Server.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMDb.Server.Infra.Database.Migrations
{
    [DbContext(typeof(IMDbContext))]
    [Migration("20230215170036_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.CastActMovies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CastActId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesActId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CastActId");

                    b.ToTable("CastMovies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.CastDirectMovies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CastDirectorId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesDirectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CastDirectorId");

                    b.ToTable("CastDirectMovies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.GenresMovies", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenresMovies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(344)
                        .HasColumnType("nvarchar(344)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<byte[]>("PasswordHashSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varbinary(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.CastActMovies", b =>
                {
                    b.HasOne("IMDb.Server.Domain.Entities.Cast", "CastAct")
                        .WithMany("ActedMovies")
                        .HasForeignKey("CastActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDb.Server.Domain.Entities.Movies", "MoviesAct")
                        .WithMany("ActorCast")
                        .HasForeignKey("CastActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CastAct");

                    b.Navigation("MoviesAct");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.CastDirectMovies", b =>
                {
                    b.HasOne("IMDb.Server.Domain.Entities.Cast", "CastDirector")
                        .WithMany("DirectedMovies")
                        .HasForeignKey("CastDirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IMDb.Server.Domain.Entities.Movies", "MoviesDirect")
                        .WithMany("DirectorCast")
                        .HasForeignKey("CastDirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CastDirector");

                    b.Navigation("MoviesDirect");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.GenresMovies", b =>
                {
                    b.HasOne("IMDb.Server.Domain.Entities.Genres", "Genres")
                        .WithMany("GenresMovies")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Server.Domain.Entities.Movies", "Movies")
                        .WithMany("GenresMovies")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genres");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Vote", b =>
                {
                    b.HasOne("IMDb.Server.Domain.Entities.Movies", "Movie")
                        .WithMany("Votes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDb.Server.Domain.Entities.Users", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Cast", b =>
                {
                    b.Navigation("ActedMovies");

                    b.Navigation("DirectedMovies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Genres", b =>
                {
                    b.Navigation("GenresMovies");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Movies", b =>
                {
                    b.Navigation("ActorCast");

                    b.Navigation("DirectorCast");

                    b.Navigation("GenresMovies");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("IMDb.Server.Domain.Entities.Users", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
